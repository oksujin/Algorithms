##### 자료형 #####

### 수 자료형 ###

## 정수형의 유효숫자 표현하기
e = 1e9
print(e)


## 실수형의 round 사용하기
# 가장 많이 쓰이는 IEEE754 표준에서는 실수형을 저장하기 위해
# 4바이트 혹은 8바이트라는 고정된 크기의 메모리를 할당한다.
# 때문에, 실수 정보를 표현할 때 정확도에 한계를 가진다.

# 그래서 0.3+0.6=0.89999가 된다.
a = 0.3 + 0.6
print(a)

# 이를 방지하기 위해서 round를 사용한다.
a = round(a, 5)
print(a, '\n')

####################################################
### 리스트 자료형 [] ###

## 리스트 초기화
a = list()
a = []

# 크기가 N인 1차원 리스트 초기화 방법
n = 10
a = [0] * n
print(a, '\n')


## 리스트 컴프리헨션 (List Comprehension)
# 리스트 내부에 코드를 작성하는 방법

# 1. 0부터 19까지 수 중, 홀수만 포함하기
a = [i for i in range(20) if i % 2 == 1]
print (a)

# 2. 1부터 9까지의 수의 제곱 값을 포함하는 리스트
b = [i*i for i in range (1, 9)]
print(b)

# 3. N*M 크기의 2차원 리스트 초기화하기
N = 3
M = 4
array = [[0] * M for _ in range(N)]
print(array, '\n')


## 참고
# _의 역할 : 반복을 수행하되, 반복을 위한 변수 값을 무시할 때 사용

## 리스트의 메서드들
# append(), sort(reverse=False), reverse()
# insert(), count(), remove()

# 1. insert(삽입할 위치, 삽입할 값) = O(N)
# 삽입할 위치에 삽입할 값을 넣어준 후, 리스트 원소 위치를 조정해야 해서
# 시간복잡도가 O(N)이다. insert를 남발하면 시간초과될 수 있다.
# append()는 맨 뒤에 붙이는거라서 시간복잡도가 O(1)

# 2. remove(특정 값) = O(N)
# insert와 마찬가지로 리스트 중간의 원소를 삭제한 후,
# 리스트 원소 위치를 조정해야 해서 O(N)이다.

## 특정한 값의 원소를 모두 제거하는 방법
# remove_set을 지정하고, 여기 포함되어있지 않을 때만
# 새로운 리스트 변수에 넣어주도록 한다.
a = [1, 2, 2, 3, 3, 4, 5, 5, 6]
remove_set = [3, 5]

# 리스트 컴프리헨션 사용해서
# i가 a에 포함되지 않을 때만, array에 담아준다.
array = [i for i in a if i not in remove_set]
print(array, '\n')

####################################################
### 튜플 자료형 () ###

## 튜플과 리스트의 차이
# 1. 튜플은 한 번 선언된 값을 변경할 수 없다.
# 2. 리스트는 대괄호[] 튜플은 소괄호()를 이용한다.

## 튜플 사용 사례
# 튜플은 그래프 알고리즘을 구현할 때 자주 사용된다.
# 최단 경로 알고리즘 내부에서 우선순위 큐를 사용하는데,
# 큐에 들어가는 데이터가 변경되지 않도록 하기 위해 사용한다.
# 또한, 튜플은 리스트에 비해 상대적으로 공간 효율적이다.

a = (1, 2, 3, 4)
print(a, '\n')

# 아래 코드를 실행하면 에러난다. 대입 연산자로 값 바꿀 수 없다.
# a[2] = 7

####################################################
### 사전 자료형 {key : 값} ###

## 사전 자료형의 특징
# 1. 키(key)와 값(value)의 쌍을 데이터로 가지는 자료형
# 2. 내부적으로 해시 테이블을 사용하므로, 데이터의 검색 수정 O(1)
#    즉, 데이터 처리에 있어 리스트보다 빠르다.

data = dict()
data['사과'] = 'Apple'
data['바나나'] = 'Banana'
data['코코넛'] = 'Coconut'
print(data, '\n')

if '사과' in data : 
    print("'사과'를 키로 가지는 데이터가 존재합니다.")

# 사전 자료형은 key값이 포함되는지를 기준으로 판단 가능
if 'Apple' in data :
    print("'사과'를 값으로 가지는 데이터가 존재합니다.")

key_list = data.keys()
value_list = data.values()
print(key_list)
print(value_list, '\n')

for key in key_list :
    print(data[key])

####################################################
### 집합 자료형 ###

## 집합 자료형의 특징
# 1. 중복을 허용하지 않는다.
# 2. 순서가 없기때문에 인덱싱으로 값을 얻을 수 없다.
# 3. 데이터 검색의 시간 복잡도는 O(1)
# 4. 집합 자료형을 초기화할 때는 set() 함수를 이용

data = set([1, 1, 2, 3, 4, 4, 5])
print("집합 초기화 및 선언 = ", data)

## 집합 자료형의 연산
a = set([1, 2, 3, 4, 5])
b = set([3, 4, 5, 5, 6, 7])

print("a = ", a, "/ b = ", b)
print("합집합 = ", a | b) 
print("교집합 = ", a & b) 
print("차집합 = ", a - b) 

## 집합 자료형 관련 함수
# add : 원소 한개 추가 / O(1)
# update : 원소 여러개 추가
# remove : 특정한 값을 갖는 원소 삭제 / O(1)